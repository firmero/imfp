function test_filename = test(deg, n, ...
							polynomials_generator_handler, ...
							evaluate_polynomial_handler, ...
							ix, forms_structs, prefix)
%BEGINDOC==================================================================
% .Author.
%
%  Roman Firment
%
%--------------------------------------------------------------------------
% .Description.
%
%  Generates polynomials, evaluates them, saves data.
%
%  Generates n polynomials of degree deg using polynomials_generator_handler.
%  Then evaluates these polynomials using evaluate_polynomial_handler.
%  That function is typically time expensive and produces a small
%  overestimation. Cell array forms_structs contains pairs of form handler
%  and their string description. All form are applied to generated
%  polynomials and interval ix.
%
%  Data produced by this test will be saved in directory test_out
%  and will have prefix prefix.
%
%--------------------------------------------------------------------------
% .Input parameters.
%
%  deg                           ... degree of generated polynomials
%  n                             ... number of generated polynomials
%  polynomials_generator_handler ... accepting parameters deg and n
%  evaluate_polynomial_handler   ... should produce as small as possible
%                                    overestimation (will be reference range)
%                                   
%  ix             ... interval x over calculation is done
%  forms_structs ... cell array of pairs of form handler and string description:
%                   { @pvhornerenc, 'Horner Form'};
%  prefix        ... data generated by this test will have that prefix
%
%--------------------------------------------------------------------------
% .Output parameters.
%
%  test_filename ... relative path to generated test data
%
%--------------------------------------------------------------------------
% .Implementation details.
%
%  For all form from cell array is generated file with data such as:
%  computed ranges, eval_times, and description.
%  The name of generated file for form is concatenation of prefix and
%  the name of form handler.
%
%  The following test data are saved in the file prefix_test.bin:
%  deg, n, ix, polynomials, number of forms, their names of data files,
%  and ranges computed by evaluate_polynomial_handler.
%
%--------------------------------------------------------------------------
% .License.
%
%  Copyright (C) 2017  Charles University in Prague, Czech Republic
%
%  LIME 1.0 is free for private use and for purely academic purposes.
%  It would be very kind from the future user of LIME 1.0 to give
%  reference that this software package has been developed
%  by at Charles University, Czech Republic.
%
%  For any other use of LIME 1.0 a license is required.
%
%  THIS SOFTWARE IS PROVIDED AS IS AND WITHOUT ANY EXPRESS OR IMPLIED
%  WARRANTIES, INCLUDING, WITHOUT LIMITATIONS, THE IMPLIED WARRANTIES
%  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
%
%--------------------------------------------------------------------------
% .History.
%
%  2017-05-05  first version
%
%--------------------------------------------------------------------------
% .Todo.
%
%
%ENDDOC====================================================================

test_out_dir = 'tests_out';
[~,~] = mkdir(test_out_dir);

test_dir_prefix = [test_out_dir filesep prefix];

polynomials = polynomials_generator_handler(deg, n);
polynomials_ranges = repmat(intval(0),n,1);

for i = 1:n

	% the 'real' value
	polynomials_ranges(i) = evaluate_polynomial_handler(polynomials(i,:),ix);

	fprintf('\rEval polynomial: %4i/%i', i, n);
end
fprintf('\n');

form_cnt = length(forms_structs);
filenames = repmat(struct('form',''),form_cnt,1);

for i = 1:form_cnt

	ranges = repmat(intval(0),n,1);
	eval_times = zeros(n,1);

	for j = 1:n
		fprintf('\rEval form: %4i/%i polynomial: %4i/%i',...
				i, form_cnt, j, n);
		tic;
		ranges(j) = forms_structs{i}{1}(polynomials(j,:),ix);
		eval_times(j) = toc;
	end

	fname = func2str(forms_structs{i}{1});

	form.ranges = ranges;
	form.eval_times = eval_times;
	form.desc = forms_structs{i}{2};

	filename = strcat(test_dir_prefix,fname,'.bin');
	% in binary mode
	save(filename, 'form', '-mat');

	filenames(i).form = filename;

end
fprintf('\n');

test.ix = ix;
test.n = n;
test.deg = deg;
test.polynomials = polynomials;
% the 'real' values of polynomials
test.polynomials_ranges = polynomials_ranges;

test.forms_count = form_cnt;
test.filenames = filenames;

test_filename = [ test_dir_prefix 'test.bin' ];

save(test_filename,'test', '-mat');

end
